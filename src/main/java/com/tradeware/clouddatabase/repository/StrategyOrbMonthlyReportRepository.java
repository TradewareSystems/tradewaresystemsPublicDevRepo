package com.tradeware.clouddatabase.repository;

import java.util.Date;
import java.util.List;

import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;

import com.tradeware.clouddatabase.entity.StrategyOrbMonthlyReportEntity;

public interface StrategyOrbMonthlyReportRepository extends CrudRepository<StrategyOrbMonthlyReportEntity, Date> {
	//List<StrategyOrbEntity> findAllByTradedDateStampAndOhlcStateNotNullAndOhlcStateEqualToTradableStateOrderBySymbolAscTradedAtDtTmAsc(
			/*@Query(value = "SELECT COUNT(open_range_break_out_id) as TRADE_COUNT, SUM(PROF_LOS_AMT_VAL) as PROF_LOS_AMT_VAL, "
					+ "(SUM(PROF_LOS_AMT_VAL) - (COUNT(open_range_break_out_id) * 150)) as PROF_LOS_AMT_VAL_FNAL, "
					+ " DT_TM_STAMP as DT_TM_STAMP FROM T_OPEN_RANGE_BREAK_OUT WHERE OHLC_STATE IS NOT NULL AND TRADABLE_STATE != 'NA' "
					+ "AND OHLC_STATE = TRADABLE_STATE AND (TRADED_STATE LIKE 'BUY%' OR TRADED_STATE LIKE 'SELL%') AND ((TRADABLE_STATE = 'BUY' AND "
					+ "CNDL_HIGHS_DIFF < CNDL_LOWS_DIFF AND (CNDL_2_HIG_MINUS_CLS = 0 OR ((3 * CNDL_2_HIG_MINUS_CLS) <= CNDL_2_CLS_MINUS_LOW))) OR "
					+ "(TRADABLE_STATE = 'SELL' AND  CNDL_LOWS_DIFF < CNDL_HIGHS_DIFF AND (CNDL_2_CLS_MINUS_LOW = 0 OR "
					+ "((3 * CNDL_2_CLS_MINUS_LOW) <= CNDL_2_HIG_MINUS_CLS ))))  AND DT_TM_STAMP BETWEEN :startDate AND :endDate GROUP BY DT_TM_STAMP")*/
			//@Transactional
		//	@Modifying
			@Query(value = "SELECT COUNT(open_range_break_out_id) as TRADE_COUNT, SUM(PROF_LOS_AMT_VAL) as PROF_LOS_AMT_VAL, "
					+ "(SUM(PROF_LOS_AMT_VAL) - (COUNT(open_range_break_out_id) * 150)) as PROF_LOS_AMT_VAL_FINAL, "
					+ " DT_TM_STAMP as DT_TM_STAMP FROM T_OPEN_RANGE_BREAK_OUT WHERE OHLC_STATE IS NOT NULL AND TRADABLE_STATE != 'NA' "
					+ "AND OHLC_STATE = TRADABLE_STATE AND (TRADED_STATE LIKE 'BUY%' OR TRADED_STATE LIKE 'SELL%') AND ((TRADABLE_STATE = 'BUY' AND "
					+ "CNDL_HIGHS_DIFF < CNDL_LOWS_DIFF AND (CNDL_2_HIG_MINUS_CLS = 0 OR ((3 * CNDL_2_HIG_MINUS_CLS) <= CNDL_2_CLS_MINUS_LOW))) OR "
					+ "(TRADABLE_STATE = 'SELL' AND  CNDL_LOWS_DIFF < CNDL_HIGHS_DIFF AND (CNDL_2_CLS_MINUS_LOW = 0 OR "
					+ "((3 * CNDL_2_CLS_MINUS_LOW) <= CNDL_2_HIG_MINUS_CLS ))))  AND DT_TM_STAMP BETWEEN :startDate AND :endDate GROUP BY DT_TM_STAMP", nativeQuery = true)
			List<StrategyOrbMonthlyReportEntity> monthlyReportForCustomOHLC_with_3TimesForce(
					@Param("startDate") Date startDate, @Param("endDate") Date endDate);
			
			
			
			@Query(value = "SELECT COUNT(open_range_break_out_id) as TRADE_COUNT, SUM(PROF_LOS_AMT_VAL) as PROF_LOS_AMT_VAL, "
					+ "(SUM(PROF_LOS_AMT_VAL) - (COUNT(open_range_break_out_id) * 150)) as PROF_LOS_AMT_VAL_FINAL, "
					+ " DT_TM_STAMP as DT_TM_STAMP FROM T_OPEN_RANGE_BREAK_OUT WHERE  (( (CNDL_2_HIG_MINUS_CLS > 1 "
					+ "and ((CNDL_2_HIG_MINUS_CLS * 7) < CNDL_2_CLS_MINUS_LOW) ) and CNDL_LOWS_DIFF < 7000 AND TRADABLE_STATE = 'BUY') "
					+ "or ( (CNDL_2_CLS_MINUS_LOW >1 and((CNDL_2_CLS_MINUS_LOW * 7) < CNDL_2_HIG_MINUS_CLS)) "
					+ "AND CNDL_HIGHS_DIFF < 7000 AND TRADABLE_STATE = 'SELL') ) "
					+ "AND DT_TM_STAMP BETWEEN :startDate AND :endDate GROUP BY DT_TM_STAMP ORDER BY TRADED_AT_DT_TM DESC;", nativeQuery = true)
	List<StrategyOrbMonthlyReportEntity> monthlyReportCustomRule1(@Param("startDate") Date startDate,
			@Param("endDate") Date endDate);
			
	// Phase 5 :: 05-15-2021 start - afterSomeSuccess
	@Query(value = "SELECT BR.DT_STAMP AS DT_TM_STAMP, COUNT(*) AS  TRADE_COUNT, "
			+ "SUM(PROF_LOS_AMT_VAL) AS PROF_LOS_AMT_VAL, (SUM(PROF_LOS_AMT_VAL) - (COUNT(*) * 150)) "
			+ "AS PROF_LOS_AMT_VAL_FINAL, "
			+ "(SUM(CASE WHEN BR.MNAL_PROF_LOS_AMT_VAL IS NOT NULL THEN MNAL_PROF_LOS_AMT_VAL "
			+ "WHEN BR.MNAL_PROF_LOS_AMT_VAL IS NULL THEN PROF_LOS_AMT_VAL END) - (COUNT(*) * 150)) "
			+ "AS PROF_LOS_AMT_VAL_MNAL_FINAL from T_OPEN_RANGE_BREAK_OUT BR INNER JOIN T_ORB_TRADE_RULE RULE "
			+ "ON BR.OPEN_RANGE_BREAK_OUT_ID = RULE.OPEN_RANGE_BREAK_OUT_ID "
			+ "AND RULE.TRADE_ON_FWD_ENGULFING_IND = true "
			+ "AND BR.DT_STAMP BETWEEN :startDate AND :endDate AND BR.CNDL_NUM <= :candleNumber "
			+ "GROUP BY BR.DT_STAMP ORDER BY BR.DT_STAMP DESC;", nativeQuery = true)
	List<StrategyOrbMonthlyReportEntity> findAllMonthlyReportByForwardEngulfingRuleTrades(@Param("startDate") Date startDate,
			@Param("endDate") Date endDate, @Param("candleNumber") Integer candleNumber);
	
	
	
	@Query(value = "SELECT BR.DT_STAMP AS DT_TM_STAMP, COUNT(*) AS  TRADE_COUNT, "
			+ "SUM(PROF_LOS_AMT_VAL) AS PROF_LOS_AMT_VAL, (SUM(PROF_LOS_AMT_VAL) - (COUNT(*) * 150)) "
			+ "AS PROF_LOS_AMT_VAL_FINAL, "
			+ "(SUM(CASE WHEN BR.MNAL_PROF_LOS_AMT_VAL IS NOT NULL THEN MNAL_PROF_LOS_AMT_VAL "
			+ "WHEN BR.MNAL_PROF_LOS_AMT_VAL IS NULL THEN PROF_LOS_AMT_VAL END) - (COUNT(*) * 150)) "
			+ "AS PROF_LOS_AMT_VAL_MNAL_FINAL from T_OPEN_RANGE_BREAK_OUT BR INNER JOIN T_ORB_TRADE_RULE RULE "
			+ "ON BR.OPEN_RANGE_BREAK_OUT_ID = RULE.OPEN_RANGE_BREAK_OUT_ID "
			+ "AND RULE.TRADE_ON_FWD_ENGULFING_LVL2_IND = true "
			+ "AND BR.DT_STAMP BETWEEN :startDate AND :endDate AND BR.CNDL_NUM <= :candleNumber "
			+ "GROUP BY BR.DT_STAMP ORDER BY BR.DT_STAMP DESC;", nativeQuery = true)
	List<StrategyOrbMonthlyReportEntity> findAllMonthlyReportByForwardEngulfingLvl2RuleTrades(@Param("startDate") Date startDate,
			@Param("endDate") Date endDate, @Param("candleNumber") Integer candleNumber);
	
	
	@Query(value = "SELECT BR.DT_STAMP AS DT_TM_STAMP, COUNT(*) AS  TRADE_COUNT, "
			+ "SUM(PROF_LOS_AMT_VAL) AS PROF_LOS_AMT_VAL, (SUM(PROF_LOS_AMT_VAL) - (COUNT(*) * 150)) "
			+ "AS PROF_LOS_AMT_VAL_FINAL, "
			+ "(SUM(CASE WHEN BR.MNAL_PROF_LOS_AMT_VAL IS NOT NULL THEN MNAL_PROF_LOS_AMT_VAL "
			+ "WHEN BR.MNAL_PROF_LOS_AMT_VAL IS NULL THEN PROF_LOS_AMT_VAL END) - (COUNT(*) * 150)) "
			+ "AS PROF_LOS_AMT_VAL_MNAL_FINAL from T_OPEN_RANGE_BREAK_OUT BR INNER JOIN T_ORB_PREV_CNDL_AVG_HIST RULE "
			+ "ON BR.OPEN_RANGE_BREAK_OUT_ID = RULE.OPEN_RANGE_BREAK_OUT_ID INNER JOIN T_ORB_PREV_CNDL_OHLC OHLC "
			+ "ON BR.OPEN_RANGE_BREAK_OUT_ID = OHLC.OPEN_RANGE_BREAK_OUT_ID INNER JOIN T_ORB_PREV_CNDL_DETAIL DTL "
			+ "ON BR.OPEN_RANGE_BREAK_OUT_ID = DTL.OPEN_RANGE_BREAK_OUT_ID AND (OHLC.HIGH_3 > OHLC.HIGH_4 "
			+ "AND ( (DTL.CNDL_3_TYPE = 'G' AND OHLC.CLOSE_3 >= OHLC.CLOSE_4 AND  OHLC.CLOSE_3 >= OHLC.OPEN_4 "
			+ "AND OHLC.OPEN_3 <= OHLC.OPEN_4 AND OHLC.OPEN_3 <= OHLC.CLOSE_4 ) "
			+ "OR (DTL.CNDL_3_TYPE = 'R' AND OHLC.OPEN_3 >= OHLC.CLOSE_4 AND  OHLC.OPEN_3 >= OHLC.OPEN_4 "
			+ "AND OHLC.CLOSE_3 <= OHLC.OPEN_4 AND OHLC.CLOSE_3 <= OHLC.CLOSE_4 ) ) ) "
			+ "AND ( (DTL.CNDL_3_TYPE = 'G' AND DTL.CNDL_4_TYPE = 'R'  AND BR.TRADABLE_STATE_ID = 'BUY' "
			+ "AND OHLC.LOW_4 >= OHLC.OPEN_3 AND BR.BUY_AT_VAL>=BR.VWAP_VAL) OR (DTL.CNDL_3_TYPE = 'R' "
			+ "AND DTL.CNDL_4_TYPE = 'G'  AND BR.TRADABLE_STATE_ID = 'SELL'  "
			+ "AND OHLC.HIGH_4 <= OHLC.OPEN_3 AND BR.VWAP_VAL >= BR.SELL_AT_VAL) )    "
			+ "AND BR.BUY_SELL_DIFF_VAL <= 300 AND BR.BUY_SELL_DIFF_VAL_2 <= 500 AND  BR.GAP_UP_DOWN_MOVE_VAL <=1500 "
			+ "AND BR.DT_STAMP BETWEEN :startDate AND :endDate AND BR.CNDL_NUM <= :candleNumber "
			+ "GROUP BY BR.DT_STAMP ORDER BY BR.DT_STAMP DESC;", nativeQuery = true)
	List<StrategyOrbMonthlyReportEntity> findAllMonthlyReportByForwardEngulfingLvl3RuleTrades(@Param("startDate") Date startDate,
			@Param("endDate") Date endDate, @Param("candleNumber") Integer candleNumber);
	
	
	
	/*@Query(value = "SELECT BR.DT_STAMP AS DT_STAMP, COUNT(*) AS  TRADE_COUNT, "
			+ "ROUND(SUM(PROF_LOS_AMT_VAL)::numeric,2) AS PROF_LOS_AMT_VAL, "
			+ "ROUND((SUM(PROF_LOS_AMT_VAL) - (COUNT(*) * 150))::numeric,2) AS PROF_LOS_AMT_VAL_FINAL "
			+ "from T_OPEN_RANGE_BREAK_OUT BR INNER JOIN T_ORB_TRADE_RULE RULE "
			+ "ON BR.OPEN_RANGE_BREAK_OUT_ID = RULE.OPEN_RANGE_BREAK_OUT_ID "
			+ "AND (RULE.TRADE_ON_SMA_VWAP_OPEN_BTWN_AVG_HI_LO_LVL2_PROD_IND = true "
			+ "OR RULE.TRADE_ON_SMA_VWAP_OPEN_BTWN_AVG_HI_LO_LVL2_MIN5_PROD_IND = true)"
			+ "AND BR.DT_STAMP BETWEEN :startDate AND :endDate AND BR.CNDL_NUM <= :candleNumber "
			+ "GROUP BY BR.DT_STAMP ORDER BY BR.DT_STAMP DESC;", nativeQuery = true)*/
	@Query(value = "SELECT BR.DT_STAMP  AS DT_TM_STAMP, COUNT(*) AS  TRADE_COUNT, "
			+ "SUM(PROF_LOS_AMT_VAL) AS PROF_LOS_AMT_VAL, (SUM(PROF_LOS_AMT_VAL) - (COUNT(*) * 150)) "
			+ "AS PROF_LOS_AMT_VAL_FINAL, "
			+ "(SUM(CASE WHEN BR.MNAL_PROF_LOS_AMT_VAL IS NOT NULL THEN MNAL_PROF_LOS_AMT_VAL "
			+ "WHEN BR.MNAL_PROF_LOS_AMT_VAL IS NULL THEN PROF_LOS_AMT_VAL END) - (COUNT(*) * 150)) "
			+ "AS PROF_LOS_AMT_VAL_MNAL_FINAL from T_OPEN_RANGE_BREAK_OUT BR INNER JOIN T_ORB_TRADE_RULE RULE "
			+ "ON BR.OPEN_RANGE_BREAK_OUT_ID = RULE.OPEN_RANGE_BREAK_OUT_ID "
			+ "AND (RULE.TRADE_ON_SMA_VWAP_OPEN_BTWN_AVG_HI_LO_LVL2_PROD_IND = true "
			+ "OR RULE.TRADE_ON_SMA_VWAP_OPEN_BTWN_AVG_HI_LO_LVL2_MIN5_PROD_IND = true)"
			+ "AND BR.DT_STAMP BETWEEN :startDate AND :endDate AND BR.CNDL_NUM <= :candleNumber "
			+ "GROUP BY BR.DT_STAMP ORDER BY BR.DT_STAMP DESC;", nativeQuery = true)
	List<StrategyOrbMonthlyReportEntity> findAllMonthlyReportBySmaVwapRuleTrades(@Param("startDate") Date startDate,
			@Param("endDate") Date endDate, @Param("candleNumber") Integer candleNumber);
	
	
	@Query(value = "SELECT DT_STAMP AS DT_TM_STAMP, SUM(TRADE_COUNT) AS TRADE_COUNT, SUM(PROF_LOS_AMT_VAL) AS PROF_LOS_AMT_VAL, "
			+ "SUM(PROF_LOS_AMT_VAL_FINAL) PROF_LOS_AMT_VAL_FINAL, SUM(PROF_LOS_AMT_VAL_MNAL_FINAL) "
			+ "PROF_LOS_AMT_VAL_MNAL_FINAL from ("
			+"SELECT BR.DT_STAMP AS DT_STAMP, COUNT(*) AS  TRADE_COUNT, SUM(PROF_LOS_AMT_VAL) AS PROF_LOS_AMT_VAL, "
			+ "(SUM(PROF_LOS_AMT_VAL) - (COUNT(*) * 150)) AS PROF_LOS_AMT_VAL_FINAL, (SUM(CASE WHEN BR.MNAL_PROF_LOS_AMT_VAL "
			+ "IS NOT NULL THEN MNAL_PROF_LOS_AMT_VAL WHEN BR.MNAL_PROF_LOS_AMT_VAL IS NULL "
			+ "THEN PROF_LOS_AMT_VAL END) - (COUNT(*) * 150)) "
			+ "AS PROF_LOS_AMT_VAL_MNAL_FINAL from T_OPEN_RANGE_BREAK_OUT BR INNER JOIN T_ORB_TRADE_RULE RULE ON "
			+ "BR.OPEN_RANGE_BREAK_OUT_ID = RULE.OPEN_RANGE_BREAK_OUT_ID "
			+ "AND RULE.TRADE_ON_SMA_VWAP_OPEN_BTWN_AVG_HI_LO_LVL2_PROD_IND = true "
			+ "AND BR.DT_STAMP BETWEEN :startDate AND :endDate AND BR.CNDL_NUM <= :candleNumber GROUP BY BR.DT_STAMP "
			+ "UNION ALL "
			+ "SELECT BR.DT_STAMP AS DT_STAMP, COUNT(*) AS  TRADE_COUNT, SUM(PROF_LOS_AMT_VAL) AS PROF_LOS_AMT_VAL, "
			+ "(SUM(PROF_LOS_AMT_VAL) - (COUNT(*) * 150)) AS PROF_LOS_AMT_VAL_FINAL, (SUM(CASE WHEN BR.MNAL_PROF_LOS_AMT_VAL IS NOT NULL "
			+ "AND BR.MNAL_PROF_LOS_AMT_VAL > 0 THEN MNAL_PROF_LOS_AMT_VAL WHEN BR.MNAL_PROF_LOS_AMT_VAL IS NULL "
			+ "OR BR.MNAL_PROF_LOS_AMT_VAL <= 0 THEN PROF_LOS_AMT_VAL END) - (COUNT(*) * 150)) "
			+ "AS PROF_LOS_AMT_VAL_MNAL_FINAL from T_OPEN_RANGE_BREAK_OUT BR INNER JOIN T_ORB_TRADE_RULE RULE "
			+ "ON BR.OPEN_RANGE_BREAK_OUT_ID = RULE.OPEN_RANGE_BREAK_OUT_ID "
			+ "AND RULE.TRADE_ON_SMA_VWAP_OPEN_BTWN_AVG_HI_LO_LVL2_MIN5_PROD_IND = true "
			+ "AND BR.DT_STAMP BETWEEN :startDate AND :endDate AND BR.CNDL_NUM <= :candleNumber GROUP BY BR.DT_STAMP"
			+ ") AS foo GROUP BY DT_STAMP ORDER BY DT_STAMP DESC;", nativeQuery = true)
	List<StrategyOrbMonthlyReportEntity> findAllMonthlyReportBySmaVwapRuleUnionTrades(@Param("startDate") Date startDate,
			@Param("endDate") Date endDate, @Param("candleNumber") Integer candleNumber);
	// Phase 5 :: 05-15-2021 end - afterSomeSuccess
	
	
	@Query(value = "SELECT BR.DT_STAMP AS DT_TM_STAMP, SUM(TRADE_COUNT) AS TRADE_COUNT, SUM(PROF_LOS_AMT_VAL) "
			+ "AS PROF_LOS_AMT_VAL, SUM(PROF_LOS_AMT_VAL_FINAL) PROF_LOS_AMT_VAL_FINAL, "
			+ "(SUM(CASE WHEN BR.MNAL_PROF_LOS_AMT_VAL IS NOT NULL THEN MNAL_PROF_LOS_AMT_VAL "
			+ "WHEN BR.MNAL_PROF_LOS_AMT_VAL IS NULL THEN PROF_LOS_AMT_VAL END) - (COUNT(*) * 150)) "
			+ "AS PROF_LOS_AMT_VAL_MNAL_FINAL  from T_OPEN_RANGE_BREAK_OUT BR INNER JOIN T_ORB_HEIKENASHI_DTL HEIEN "
			+ "ON BR.OPEN_RANGE_BREAK_OUT_ID = HEIEN.OPEN_RANGE_BREAK_OUT_ID INNER JOIN T_ORB_STOCHASTIC_DTL STOC "
			+ "ON BR.OPEN_RANGE_BREAK_OUT_ID = STOC.OPEN_RANGE_BREAK_OUT_ID AND ((STOC.STOCH_MIN_5_VAL_K1 <40 "
			+ "AND HEIEN.HEIKIN_ASHI_TREND_MIN60 LIKE '%BUY%' AND (HEIEN.HEIKIN_ASHI_TREND_MIN15 NOT LIKE '%SELL%' "
			+ "OR HEIEN.HEIKIN_ASHI_TREND_MIN5 NOT LIKE '%SELL%') AND BR.TRADABLE_STATE_ID = 'BUY' "
			+ "AND (( (BR.BUY_AT_VAL-BR.VWAP_VAL) * BR.LOT_SIZE) > -3000) "
			+ "AND (( (BR.BUY_AT_VAL-BR.VWAP_VAL) * BR.LOT_SIZE) < 15000))  "
			+ "OR (STOC.STOCH_MIN_5_VAL_K1 >60 AND HEIEN.HEIKIN_ASHI_TREND_MIN60 LIKE '%SELL%'  "
			+ "AND (HEIEN.HEIKIN_ASHI_TREND_MIN15 NOT LIKE '%BUY%' OR HEIEN.HEIKIN_ASHI_TREND_MIN5 "
			+ "NOT LIKE '%BUY%') AND BR.TRADABLE_STATE_ID = 'SELL' "
			+ "AND (( (BR.VWAP_VAL - BR.SELL_AT_VAL) * BR.LOT_SIZE) > -3000)  "
			+ "AND (( (BR.VWAP_VAL - BR.SELL_AT_VAL) * BR.LOT_SIZE) < 15000)  )  ) "
			+ "AND BR.BUY_SELL_DIFF_VAL <= 500 AND BR.BUY_SELL_DIFF_VAL_2 <= 700 "
			+ "AND  BR.GAP_UP_DOWN_MOVE_VAL <=2500 AND BR.DT_STAMP BETWEEN :startDate AND :endDate "
			+ "AND BR.CNDL_NUM <= :candleNumber GROUP BY BR.DT_STAMP ORDER BY BR.DT_STAMP DESC", nativeQuery = true)
	List<StrategyOrbMonthlyReportEntity> findAllMonthlyReportBySmaVwapRule2Trades(@Param("startDate") Date startDate,
			@Param("endDate") Date endDate, @Param("candleNumber") Integer candleNumber);

}
